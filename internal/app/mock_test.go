// Code generated by MockGen. DO NOT EDIT.
// Source: app.go

// Package app is a generated GoMock package.
package app

import (
	userrepository "go-assessment/internal/userrepository"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// Mockdb is a mock of db interface.
type Mockdb struct {
	ctrl     *gomock.Controller
	recorder *MockdbMockRecorder
}

// MockdbMockRecorder is the mock recorder for Mockdb.
type MockdbMockRecorder struct {
	mock *Mockdb
}

// NewMockdb creates a new mock instance.
func NewMockdb(ctrl *gomock.Controller) *Mockdb {
	mock := &Mockdb{ctrl: ctrl}
	mock.recorder = &MockdbMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockdb) EXPECT() *MockdbMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *Mockdb) CreateUser(firstName, lastName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", firstName, lastName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockdbMockRecorder) CreateUser(firstName, lastName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*Mockdb)(nil).CreateUser), firstName, lastName)
}

// DeleteUser mocks base method.
func (m *Mockdb) DeleteUser(userId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockdbMockRecorder) DeleteUser(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*Mockdb)(nil).DeleteUser), userId)
}

// GetUser mocks base method.
func (m *Mockdb) GetUser(userId string) (userrepository.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", userId)
	ret0, _ := ret[0].(userrepository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockdbMockRecorder) GetUser(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*Mockdb)(nil).GetUser), userId)
}

// UpdateUser mocks base method.
func (m *Mockdb) UpdateUser(user userrepository.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockdbMockRecorder) UpdateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*Mockdb)(nil).UpdateUser), user)
}
